AWSTemplateFormatVersion: 2010-09-09
Description: ---
#Metadata:

Parameters:

  CidrClassB:
    Type: String

  Name:
    Type: String

  Stage:
    Type: String

#Mappings:

#Conditions:

Resources:

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'I am an Internet Gateway'

  PrivateNatSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub 10.${CidrClassB}.96.0/20
      VpcId: !Ref Vpc

  PrivateNatSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateNatSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnetA
      RouteTableId: !Ref PrivateNatSubnetARouteTable

  PrivateNatNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc

  PrivateNatNetworkAclEntryAllowVpcIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt Vpc.CidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNatNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1

  PrivateNatNetworkAclEntryAllowAllOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref PrivateNatNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1

  PrivateNatNetworkAclSubnetAAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNatNetworkAcl
      SubnetId: !Ref PrivateNatSubnetA

  PrivateNatNetworkAclSubnetBAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNatNetworkAcl
      SubnetId: !Ref PrivateNatSubnetB

  PrivateNatSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub 10.${CidrClassB}.112.0/20
      VpcId: !Ref Vpc

  PrivateNatSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateNatSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnetB
      RouteTableId: !Ref PrivateNatSubnetBRouteTable

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc

  PrivateNetworkAclEntryAllowVpcIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt Vpc.CidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1

  PrivateNetworkAclEntryAllowVpcOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt Vpc.CidrBlock
      Egress: true
      NetworkAclId: !Ref PrivateNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1

  PrivateNetworkAclSubnetAAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub 10.${CidrClassB}.0.0/20
      VpcId: !Ref Vpc

  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateNetworkAclSubnetBAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub 10.${CidrClassB}.16.0/20
      VpcId: !Ref Vpc

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc

  PublicNetworkAclEntryAllowAllIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1

  PublicNetworkAclEntryAllowAllOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1

  PublicNetworkAclSubnetAAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetA

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub 10.${CidrClassB}.48.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  PublicSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetARouteTable

  PublicSubnetARouteTableInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetARouteTable
    DependsOn:
      - VpcGatewayAttachment

  PublicNetworkAclSubnetBAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetB

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub 10.${CidrClassB}.64.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  PublicSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetBRouteTable

  PublicSubnetBRouteTableInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetBRouteTable
    DependsOn:
      - VpcGatewayAttachment

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub 10.${CidrClassB}.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${Name}-${AWS::Region}-${Stage}-vpc

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

Outputs:

  CidrBlock:
    Value: !GetAtt Vpc.CidrBlock

  PrivateNatSubnetA:
    Value: !Ref PrivateNatSubnetA

  PrivateSubnetA:
    Value: !Ref PrivateSubnetA

  PrivateNatSubnetARouteTable:
    Value: !Ref PrivateNatSubnetARouteTable

  PrivateSubnetB:
    Value: !Ref PrivateSubnetB

  PrivateSubnetIdList:
    Value: !Join [',', [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ] ]

  PublicSubnetA:
    Value: !Ref PublicSubnetA

  PublicSubnetIdList:
    Value: !Join [',', [ !Ref PublicSubnetA, !Ref PublicSubnetB ] ]

  VpcCidr:
    Value: !Sub 10.${CidrClassB}.0.0/16

  VpcId:
    Value: !Ref Vpc
