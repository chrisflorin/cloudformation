AWSTemplateFormatVersion: 2010-09-09
Description: ---
#Metadata:

Parameters:

  AmiId:
    Type: AWS::EC2::Image::Id

  ApplicationName:
    Type: String

  CreateLoadBalancer:
    Default: false
    Type: String

  HealthCheckPath:
    Default: '/api/health-check'
    Type: String

  InstanceType:
    Type: String

  LoadBalancerId:
    Default: none
    Type: String

  LoadBalancerScheme:
    Default: internal
    Type: String

  LoadBalancerSubnetIdList:
    Default: ''
    Type: CommaDelimitedList

  Port:
    Default: 80
    Type: String

  Protocol:
    Default: HTTP
    Type: String

  PrivateSubnetIdList:
    Type: CommaDelimitedList

  Stage:
    Type: String

  VpcCidr:
    Type: String

  VpcId:
    Type: String

#Mappings:

Conditions:

  CreateLoadBalancer: !And [ !Equals [ !Ref CreateLoadBalancer, true ], !Not [ !Equals [ !Ref LoadBalancerId, none ] ] ]

Resources:

#1) Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt IamInstanceProfile.Arn
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref SecurityGroup

#2) Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: !Ref PrivateSubnetIdList

#3) Load Balancer
  LoadBalancer:
    Condition: CreateLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-app-lb
      Scheme: !Ref LoadBalancerScheme
      Subnets: !Ref LoadBalancerSubnetIdList
      Type: application

#4) Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref Port
      HealthCheckProtocol: !Ref Protocol
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 1
      Matcher:
        HttpCode: 200
      Name: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-target-group
      Port: !Ref Port
      Protocol: !Ref Protocol
      UnhealthyThresholdCount: 1
      VpcId: !Ref VpcId

#5) Load Balancer Listener

#6) Internal/External Dns Entries; Ipv4 and Ipv6

#7) EFS Shared Filesystem and Backup Plan

#8) Security Group: Web
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-security-group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref Port
          ToPort: !Ref Port
          CidrIp: !Ref VpcCidr
      VpcId: !Ref VpcId

#9) Instance Profile/Iam Role
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamRole

  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-associate-address-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                Resource:
                  - '*'

#10) Ssh Access Policy and Security Group
